#!/bin/bash
# ~/.bashrc: executed by bash(0) for non-login shells.
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ls='ls -la --color'
alias list='ls'

alias tree='tree -C'

alias search=ack $1

#An editing alias to open a file in an editor of choice.
alias edit='vim'
alias vi='vim'

# Media
alias play='vlc'
alias sound='pavucontrol'

alias haskell='ghci'

#An alias to quickly edit aliases.
alias bashrc='edit ~/.bashrc'
alias aliases='edit ~/.aliases'
alias vimrc='edit ~/.vimrc'

REPO_PATH="/home/$USER/Documents/Repositories"

#Aliases for directory changes
alias ..='cd ..'
alias ~='cd ~'
alias downloads='cd ~/Downloads/'

# Utility commands
alias findpdb=findpdb
alias pylint=pylinting
alias git=git_override

GIT_STATUS="\git status | sed -n -e '/^.*modified:\s\s\snewspeak\|satchel/! s/^.*modified:\s\s\s//p'
                        | sed -n -e 's/\s.*//g;p'"


# Function for finding pdb traces left in code.
findpdb(){
    PATH_TO_SEARCH=$1
    echo -e "\e[92mPath to search:" $PATH_TO_SEARCH "\e[0m"
    ack -H "pdb.set_trace"
}

findTODO(){
    for i in $(eval $GIT_STATUS)
    do
        echo -e "\e[92mPath to search:" $i "\e[0m"
        VAL=`ack -H TODO $i`
        echo $VAL
    done
}

# Function for overriding the existing git commands with custom implementations.
git_override() {
    if [ $# -lt 1 ]
    then
        \git help
    elif [ $# -eq 1 ]
        then
        if [ "$1" == 'status' ]
        then
            # Just perform a regular git status.
            \git status
        elif [ "$1" == 'add' ]
        then
            auto_add_git
        else
            \git $1
        fi
    elif [ $# -eq 2 ]
    then
        if [ "$1" == 'branch' ]
        then
            \git branch $2
            \git checkout $2
        elif [ "$1" == 'remove' ]
        then
            # Reset all changes, remove the desired file, and re-add.
            # This will discard all the changes for the specified file.
            \git reset
            echo "Discarding changes in $2"
            \git checkout -- $2
            git add
        else
            \git $@
        fi
    else
        \git $@
    fi
}

auto_add_git() {
    for i in $(eval $GIT_STATUS)
    do
        if [ $i != 'newspeak' ]
        then
            echo "Adding file: " $i
            \git add $i
        fi
    done
    \git status
}

#ssh_override() {
    # You can run commands through ssh without issue, but if you do that it will automatically close the session
    # once they finish.
    #
    # So, we need to create a new bash session after running whatever commands we want to run.
    #
    # First, cat the message of the day to print it upon connecting, because creating a new bash shell prevents
    # it from showing up automatically like it normally does.
    #
    # Then, export the prompt to be used by the new bash shell, along with any other environment variables.
    #
    # Finally, start the new bash shell with an initialization file.  The init file used will be via process
    # substitution (the <() ) syntax.  This creates a super temporary bash file in /dev/fd/ which is deleted
    # after the command finishes.  Any command outputs inside the "process" are output to the file, and the file
    # contents are passed as an input to another command (like piping, but more convoluted).  So, if you want to
    # run raw commands (like in a bash initialization file) you would need to echo them to this file.  Hence
    # this whole complicated mess below.
#    command_string="cat /etc/motd;export force_color_prompt=yes;export PS1=\"\[\e[92m\]\@\[\e[0m\] at \[\w\]\n\[\e[32m\]$@:> \[\e[m\]\" || echo 'Could not set up prompt';bash --init-file <(echo 'alias ls=\"ls -la --color\";alias ..=\"cd ..\";alias ~=\"cd $home_directory\";alias grep=\"grep --color=auto\"')"
#    if [ $1 == "--help" ]
#    then
#        man ssh
#    elif [ $1 == "-h" ]
#    then
#        man ssh
#    fi
#}

# Setting local aliases on servers.
#alias ssh=ssh_override

# Reload the existing shell to reflect changes to this file, or the bashrc file.
alias reload="source ~/.bashrc"

alias matrix=cmatrix

VPN_PATH="/home/$USER/Documents/VPN"
# Connecting to the IBM VPN
alias vpn='sudo openconnect -k $VPN_PATH/$USER.key -c $VPN_PATH/$USER.pem --cafile=$VPN_PATH/sasvpn-ca.pem --csd-wrapper=$VPN_PATH/sasvpn-ohsd.py -i tun1 --no-xmlpost sasvpn.pok.ibm.com'

